package com.ftn.sbnz.rules.filtering;

import com.ftn.sbnz.model.dtos.TravelPreferences;
import com.ftn.sbnz.model.models.Location;
import com.ftn.sbnz.model.enums.Transport;
import com.ftn.sbnz.model.enums.PublicTransportAccessibility;
import com.ftn.sbnz.model.models.RuleParameter;
import com.ftn.sbnz.model.enums.Budget;
import com.ftn.sbnz.model.events.RoadStatusEvent;
import com.ftn.sbnz.model.enums.RoadStatus;

query "getLocations"
    $location: Location()
end

rule "Filter out locations not accessible by public transport"
    agenda-group "scoring"
    salience 20
    when
        TravelPreferences(transport == Transport.PUBLIC_TRANSPORT)
        $location: Location(publicTransportAccessibility == PublicTransportAccessibility.CAR_ONLY)
    then
        delete($location);
        System.out.println("Filtered location due to transport: " + $location.getName());
end

rule "Filter out locations based on fitness level"
    agenda-group "scoring"
    salience 20
    when
        $prefs: TravelPreferences($fitness: fitnessLevel)
        $location: Location($reqFitness: requiredFitness, eval($reqFitness.ordinal() > $fitness.ordinal()))
    then
        delete($location);
        System.out.println("Filtered location due to fitness level: " + $location.getName());
end


rule "Filter out seasonally closed locations"
    agenda-group "scoring"
    salience 20
    when
        $prefs: TravelPreferences($month: travelMonth)
        $location: Location(seasonal == true, openingMonth > $month || closingMonth < $month)
    then
        delete($location);
        System.out.println("Filtered location due to season: " + $location.getName());
end

//rule "Filter expensive locations for LOW budget"
//    agenda-group "scoring"
//    salience 20
//    when
//        TravelPreferences(budget == Budget.LOW)
//        RuleParameter(paramKey == "BUDGET_LIMIT_LOW", $limit: paramValue)
//        $location: Location(ticketPrice > $limit)
//    then
//        delete($location);
//        System.out.println("Filtered location due to low budget: " + $location.getName());
//end
//
//rule "Filter expensive locations for MEDIUM budget"
//    agenda-group "scoring"
//    salience 20
//    when
//        TravelPreferences(budget == Budget.MEDIUM)
//        RuleParameter(paramKey == "BUDGET_LIMIT_MEDIUM", $limit: paramValue)
//        $location: Location(ticketPrice > $limit)
//    then
//        delete($location);
//        System.out.println("Filtered location due to medium budget: " + $location.getName());
//end

rule "Filter locations if access road is closed"
    agenda-group "scoring"
    salience 30
    when
        RoadStatusEvent(roadName == "Vršič Pass", status == RoadStatus.CLOSED)
        $location: Location(name == "Triglav National Park" || name == "Kranjska Gora")
    then
        delete($location);
        System.out.println("Filtered location (due to CEP event) '" + $location.getName() + "' because Vršič Pass is closed.");
end